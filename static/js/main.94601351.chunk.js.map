{"version":3,"sources":["RegisterForm.jsx","App.js","serviceWorker.js","index.js"],"names":["RegisterForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fields","username","NPI","email","phoneNumber","address","errors","handleChange","bind","assertThisInitialized","submitRegistrationForm","e","target","name","value","setState","preventDefault","validateForm","alert","formIsValid","match","RegExp","test","length","react_default","a","createElement","MuiThemeProvider_default","AppBar_default","title","method","onSubmit","TextField_default","placeholder","label","onChange","className","type","RaisedButton_default","primary","style","onClick","Component","margin","App","src_RegisterForm","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94601351.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport TextField from 'material-ui/TextField';\n\n\n// fields are username, NPI, address, phone number, email\nclass RegisterForm extends Component {\n  constructor(props) {\n\tsuper(props);\n\tthis.state = {\n\t\tfields: {username: '', NPI: '', email: '', phoneNumber: '', address: ''},\n\t\terrors: {username: '', NPI: '', email: '', phoneNumber: '', address: ''}\n\t}\n\n\tthis.handleChange = this.handleChange.bind(this);\n\tthis.submitRegistrationForm = this.submitRegistrationForm.bind(this);\n  }\n\n  handleChange(e) {\n\t  let fields = this.state.fields;\n\t  fields[e.target.name] = e.target.value;\n\t  this.setState({\n\t    fields\n\t  });\n  }\n\n  submitRegistrationForm(e) {\n      e.preventDefault();\n      if (this.validateForm()) {\n          let fields = {};\n          fields.username = \"\";\n          fields.NPI = \"\"\n          fields.email = \"\";\n          fields.phoneNumber = \"\";\n          fields.address = \"\";\n          this.setState({fields:fields});\n          alert(\"Form submitted\");\n      }\n\n  }\n  \n  validateForm() {\n  \tlet {fields} = this.state;\n  \tlet errors = {};\n    let formIsValid = true\n\n    // name validation \n    if (!fields[\"username\"]) {\n        formIsValid = false;\n        errors[\"username\"] = \"Please enter your full name.\";\n    }\n    \n    if (typeof fields[\"username\"] !== \"undefined\") {\n        if (!fields[\"username\"].match(/^[a-zA-Z ]*$/)) {\n          formIsValid = false;\n          errors[\"username\"] = \"Please enter alphabetic characters only.\";\n        }\n    }\n    \n    // email validation \n    if (!fields[\"email\"]) {\n        formIsValid = false;\n        errors[\"email\"] = \"Please enter your email\";\n    }\n\n    if (typeof fields[\"email\"] !== \"undefined\") {\n        //regular expression for email validation\n        var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\n        if (!pattern.test(fields[\"email\"])) {\n          formIsValid = false;\n          errors[\"email\"] = \"Please enter a valid email address.\";\n        }\n      }\n    \n    // phone validation 10 digits ignore all else\n    if (!fields[\"phoneNumber\"]) {\n        formIsValid = false;\n        errors[\"phoneNumber\"] = \"Please enter your phone number\";\n    }\n\n    if (typeof fields[\"phoneNumber\"] !== \"undefined\") {\n        if (! (fields[\"phoneNumber\"].match(/\\d/g) && fields[\"phoneNumber\"].match(/\\d/g).length === 10)) {\n          formIsValid = false;\n          errors[\"phoneNumber\"] = \"Please enter a valid 10 digit phone number.\";\n        }\n    }\n\n    // NPI validation uses the luhn algorithm for a 10 digit number with the final digit as a check digit, see https://www.cms.gov/Regulations-and-Guidance/Administrative-Simplification/NationalProvIdentStand/Downloads/NPIcheckdigit.pdf\n    // for this naive implementation we can just check for 10 digits\n    if (!fields[\"NPI\"]) {\n    \tformIsValid = false\n    \terrors[\"NPI\"] = \"Please enter your NPI number\"\n    }\n    \n    if (typeof fields[\"NPI\"] !== \"undefined\") {\n        if (!(fields[\"NPI\"].match(/\\d/g) && fields[\"NPI\"].match(/\\d/g).length === 10)) {\n          formIsValid = false;\n          errors[\"NPI\"] = \"Please enter a valid NPI number.\";\n        }\n    }\n\n    // street address validation is complex and in production use cases should use a specialized library, here we can just check for invalid characters\n    if (!fields[\"address\"]) {\n    \tformIsValid = false\n    \terrors[\"NPI\"] = \"Please enter your business address\";\n    }\n\n    this.setState({\n        errors: errors\n      });\n    return formIsValid;\n\n\n  }\n\n  render() {\n    return (\n      <div>\n        <MuiThemeProvider>\n          <div>\n          <AppBar\n             title=\"Availity Registration\"\n           />\n\t          <form method=\"post\"  name=\"userRegistrationForm\"  onSubmit={this.submitRegistrationForm}>\n\t\t           <TextField\n\t\t             placeholder=\"Enter your First and Last Name\"\n\t\t             label=\"Full Name\"\n\t\t             onChange ={this.handleChange}\n\t\t             name='username'\n\t\t             value={this.state.fields.username}\n\t\t             />\n\t\t           <div className=\"errorMsg\">{this.state.errors.username}</div>\n\t\t           <br/>\n\t\t           <TextField\n\t\t             placeholder=\"Enter your NPI Number\"\n\t\t             label=\"NPI Number\"\n\t\t             onChange ={this.handleChange}\n\t\t             name='NPI'\n\t\t             value={this.state.fields.NPI}\n\t\t             />\n\t\t           <div className=\"errorMsg\">{this.state.errors.NPI}</div>\n\t\t           <br/>\n\t\t           <TextField\n\t\t             placeholder=\"Enter your Business Address\"\n\t\t             label=\"Business Address\"\n\t\t             name='address'\n\t\t             onChange ={this.handleChange}\n\t\t             value={this.state.fields.address}\n\t\t             />\n\t\t           <div className=\"errorMsg\">{this.state.errors.address}</div>\n\t\t           <br/>\n\t\t           <TextField\n\t\t             type = \"tel\"\n\t\t             placeholder=\"Enter your Phone Number\"\n\t\t             label=\"Phone Number\"\n\t\t             name='phoneNumber'\n\t\t             onChange ={this.handleChange}\n\t\t             value={this.state.fields.phoneNumber}\n\t\t             />\n\t\t           <div className=\"errorMsg\">{this.state.errors.phoneNumber}</div>\n\t\t           <br/>\n\t\t           <TextField\n\t\t             type = \"email\"\n\t\t             placeholder=\"Enter your email address\"\n\t\t             label=\"Email address\"\n\t\t             name='email'\n\t\t             onChange ={this.handleChange}\n\t\t             value={this.state.fields.email}\n\t\t             />\n\t\t           <div className=\"errorMsg\">{this.state.errors.email}</div>\n\t\t           <RaisedButton label=\"Register\" primary={true} style={style} onClick={this.submitRegistrationForm}/>\n\t\t         </form>\n\t         </div>\n         </MuiThemeProvider>\n      </div>\n    );\n  }\n}\n\nconst style = {\n  margin: 15,\n};\n\n\nexport default RegisterForm;","import React, { Component } from 'react';\nimport './App.css';\nimport RegisterForm from './RegisterForm.jsx'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <RegisterForm />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}